{% extends 'layout.html.twig' %}
{% import 'macros/breadcrumb.html.twig' as breadCrumb %}

{% block content %}
    {% for flash_message in app.session.flashBag.get('success') %}
        <div class="alert alert-success">
            {{ flash_message }}
        </div>
    {% endfor %}
{{ breadCrumb.create(category, lesson) }}

<div class="row lesson-wrapper"
     id="lesson-wrapper"
     data-lesson-id="{{ lesson.id }}"
     data-update-users-progress-url="{{ path("user_update_progress") }}"
>
    <div class="col-md-9">
        {% for index, sentence in lesson.sentences %}
            <div class="row">
                <div class="col-xs-2 col-sm-1 col-md-1">
                    <button class="btn btn-default js-btn-play" onclick="toggleAudio({{ index }})" type="button">
                        <i class="glyphicon glyphicon-volume-up"></i>
                    </button>
                    <audio class="hidden" id="audio{{ index }}">
                        {% set audioIndex = index+1 %}
                        <source src="{{ asset('/assets/mp3/'~category.slug~'/'~lesson.position~'/'~audioIndex~'.mp3') }}">
                    </audio>
                </div>

                <div class="col-xs-7 col-sm-9 col-md-10">
                    <div class="form-group">
                        <input
                                class="form-control input{% if index in savedSentences %} saved{% endif %}"
                                id="input{{ index }}"
                                placeholder="{{ audioIndex }}."
                                onkeydown="handleInputOnKeyDown({{ index }}, event)"
                                tabindex="{{ index }}"
                        >
                        <p class="text-left hidden" id="answer{{ index }}">{{ sentence }}</p>
                        <p class="text-left result" id="result{{ index }}"></p>
                    </div>
                </div>

                <div class="col-xs-2 col-sm-1 col-md-1">
                    <button class="btn btn-default" id="btn-check{{ index }}" onclick="checkAnswer({{ index }})" type="button">
                        <i class="glyphicon glyphicon-question-sign text-mute"></i>
                    </button>
                </div>
            </div>
        {% endfor %}
    </div>

    <div class="col-md-3">
        <div class="sticky-sidebar-wrapper">
            <div class="row" data-spy="affix" data-offset-top="105">
                <div class="col-xs-12 form-group">
                    <button
                            id="js-update-users-stats"
                            class="btn btn-lg btn-success btn-block"
                            data-target="#authModal"
                    >
                        <i class="glyphicon glyphicon-ok glyphicon-paperclip"></i>
                        Tạm lưu làm sau
                    </button>
                </div>
            </div>
        </div>

        {{ breadCrumb.create(category, lesson, 'hidden-md hidden-lg') }}

        <div class="row">
            <div class="col-xs-12">
                <h4>Helpful links</h4>
                <ul>
                    <li><a href="#">Hoc tieng anh</a></li>
                    <li><a href="#">Hoc tieng anh</a></li>
                    <li><a href="#">Hoc tieng anh</a></li>
                    <li><a href="#">Hoc tieng anh</a></li>
                    <li><a href="#">Hoc tieng anh</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

{{ breadCrumb.create(category, lesson, 'hidden-sm hidden-xs') }}

<div id="authModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body hidden" id="js-modal-body-login"></div>
            <div class="modal-body" id="js-modal-body-register"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/sweetalert2/6.6.2/sweetalert2.min.js"></script>

    <script>
        function updateUserStats() {
            console.log(getUserAnswersData());
            console.log('server data from here');
            $.ajax({
                url: '{{ path('user_update_progress') }}',
                method: 'post',
                data: getUserAnswersData()
            }).then(function (data) {
                console.log(data);
                swal(
                    'Good job!',
                    'You clicked the button!',
                    'success'
                );
            });
        }

        function getLessonId() {
            return '{{ lesson.id }}';
        }

        function getUserAnswersData() {
            let data = {
                lessonId: getLessonId(),
                isLessonDone: isLessonDone()
            };

            {# if the lesson is done, we dont need to send all the sentence indexes,
            we only send them when the lesson is not done #}
            if (!isLessonDone()) {
                data.doneSentences = getDoneSentences();
            }

            return data;
        }

        function getDoneSentences() {
            let sentences = [];

            $('.done').each(function () {
                sentences.push($(this).attr('tabindex'));
            });

            return sentences;
        }

        function isLessonDone() {
            return $('.input.done').length === $('.input').length ? 1 : 0;
        }

        function showLoginForm() {
            getAuthModal().modal('show');

            let $form = $('#js-modal-body-login');

            if ($form.is(':empty')) {
                $.ajax({
                    url: "{{ path('fos_user_security_login') }}"
                }).then(function (data) {
                    $form.html(data);
                });
            }

            toggleAuthForms($form);
        }

        function showRegistrationForm() {
            let $form = $('#js-modal-body-register');

            if ($form.is(':empty')) {
                $.ajax({
                    url: "{{ path('fos_user_registration_register') }}",
                    method: 'get'
                }).then(function (data) {
                    $form.html(data);
                });
            }

            toggleAuthForms($form);
        }

        function toggleAuthForms($form) {
            let $authFormWrapper = $('#authModal');
            $authFormWrapper.find('.modal-body').addClass('hidden');

            $form.removeClass('hidden');
        }

        function toggleAudio(index) {
            let audioElements = document.getElementsByTagName('audio');
            let currentAudio = document.getElementById('audio'+index);

            {# if there's another audio playing, stop it. #}
            for (let i = 0; i < audioElements.length; i++) {
                if (audioElements[i] != currentAudio && !audioElements[i].paused) {
                    audioElements[i].pause();
                    break;
                }
            }

            currentAudio.paused ? currentAudio.play() : currentAudio.pause();
        }

        function checkAnswer(index) {
            let $inputElement = $('#input'+index);
            let $answerElement = $('#answer'+index);
            let $btnCheck = $('#btn-check'+index);

            // if the sentence is already done
            if ($inputElement.hasClass('done')) {
                $inputElement.val($answerElement.html());
                return;
            }

            let resultContent = compareAnswers($inputElement, $answerElement);
            let $resultElement = $("#result"+index);

            // if user's answer is not correct
            if (resultContent.indexOf('text-danger') !== -1) {
                $btnCheck.html('<b class="glyphicon glyphicon-remove text-danger"></b>');
                $resultElement.html(resultContent);
            } else {
                $btnCheck.html('<b class="glyphicon glyphicon-ok text-success"></b>');
                $resultElement.html('');
                $inputElement.val($answerElement.html()).addClass('done');

                {# try to update user's stats if all the sentences are done #}
                if (isLessonDone()) {
                    isUserLoggedIn()
                        .then(function () {
                            getSaveProgressButton().closest('.sticky-sidebar-wrapper').remove();
                            updateUserStats();
                        })
                        .catch(function () {
                            getSaveProgressButton().html('<i class="glyphicon glyphicon-check"></i> Lưu kết quả')
                        })
                    ;
                }
            }
        }

        function compareAnswers($inputElement, $answerElement) {
            let input = $inputElement.val().trim().toLowerCase().replace(/[^\w\s-]*/g, '').replace(/  /g, ' ').split(" ");
            let answer = $answerElement.html().trim().toLowerCase().replace(/[^\w\s-]*/g, '').replace(/  /g, ' ').split(" ");
            let result = $answerElement.html().split(' '); // the result after comparing input and answer

            for (let i = 0; i < result.length; i++) {
                if (answer[i] != input[i]){
                    result[i] = "<span class='text-danger'>"+result[i]+"</span>";
                }
            }

            if (input.length > answer.length) {
                result[result.length - 1] = "<span class='text-danger'>"+result[result.length - 1]+"</span>";
            }

            return result.join(" ");
        }

        function handleInputOnKeyDown(index, event) {
            {# Ctrl + Space = toggleAudio() #}
            if (event.ctrlKey && event.keyCode == 32) {
                toggleAudio(index);
            }

            {# Enter = Compare input & answer #}
            else if (event.keyCode == 13) {
                checkAnswer(index);
            }

            {# Ctrl + Enter = Hide result #}
            else if (event.ctrlKey && event.keyCode == 13) {
                document.getElementById('result'+index).style.display = 'none';
            }

           {# Down arrow key = next sentence || Up arrow key = previous sentence #}
            else if (event.keyCode== 40 || event.keyCode==38) {
                let inputs = document.querySelectorAll('[tabindex]');
                let currentInputIndex = document.activeElement.getAttribute('tabindex');

                {# Down arrow key = focus next input #}
                if (event.keyCode == 40) {
                    let nextInputIndex = parseInt(currentInputIndex) + 1;
                    let nextInput = inputs[nextInputIndex] ;
                    if(nextInput != undefined) {
                        nextInput.focus();
                    }
                }

                {# Up arrow key = focus previous input #}
                else {
                    let previousInputIndex = parseInt(currentInputIndex) - 1;
                    let previousInput = inputs[previousInputIndex];
                    if (previousInput != undefined) {
                        previousInput.focus();
                    }
                }
            }
        }

        function mapErrorsToForm($form, errors) {
            let html = '';

            $.each(errors, function (field, message) {
                if (typeof message === 'object') {
                    $.each(message, function (childField, childMessage) {
                        message = childMessage;
                    })
                }
                html += '<div class=\"alert alert-danger\">'+message+'</div>';
            });

            $form.find('.js-modal-form-error').html(html);
        }

        function isUserLoggedIn() {
            return $.ajax({
                url: "{{ path("user_show") }}"
            });
        }

        function setDoneSentences(indexes) {
            let firstUndoneSentenceIndex;

            for (let i = 0;  i <= Math.max(...indexes); i++) {
                if (indexes.includes(i)) {
                    $('#input'+i).val($('#answer'+i).html());
                    $('#btn-check'+i).click();
                } else if (!firstUndoneSentenceIndex && !indexes.includes(i)) {

                    firstUndoneSentenceIndex = i;
                    $('#input'+firstUndoneSentenceIndex).focus();
                }
            }
        }
        
        function getSaveProgressButton() {
            return $('#js-update-users-stats');
        }

        function getAuthModal() {
            return $('#authModal');
        }
        
        function spinButton($button, text) {
            $button.prop('disabled', true);

            $oldHtml = $button.html();

            let spinClass = 'glyphicon glyphicon-refresh glyphicon-spin';

            if (!text) {
                $button.find('i').attr('class', spinClass);
            } else {
                $button.html('<i class="'+spinClass+'"></i> ' + text);
            }

            setTimeout(function () {
                $button.html($oldHtml);
                $button.prop('disabled', false);
            }, 2000);
        }
        
        function getSavedSentenceIndexes() {
            let indexes = [];

            $('input.saved').each(function () {
                indexes.push(parseInt($(this).attr('tabindex')));
            });

            return indexes;
        }
        
        function updateLoggedInNavBar() {
            if ($('#js-navbar-logged-in').hasClass('hidden')) {
                $('.navbar-right').toggleClass('hidden');
            }
        }
    </script>

    <script>
        $(document).ready(function(){
            $("html,body").animate({scrollTop: 0}, 100);

            $(".input").focus(function(){
                $("html, body").animate({scrollTop: $(this).offset().top - 100}, 200);
            });

            $('#js-update-users-stats').on('click', function (e) {
                let $self = $(e.currentTarget);

                isUserLoggedIn()
                    .then(function () {
                        spinButton($self);
                        updateUserStats();
                    })
                    .catch(function () {
                        showLoginForm();
                    });
            });

//            setDoneSentences(getSavedSentenceIndexes());

            setDoneSentences([0, 1, 2, 3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]);

            let $authModal = getAuthModal();

            $authModal.on('submit', 'form', function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'),
                    data: $(this).serialize(),
                    method: 'post'
                }).then(function () {
                    updateUserStats();
                    $authModal.modal('hide');
                    updateLoggedInNavBar();
                    getSaveProgressButton().closest('.sticky-sidebar-wrapper').remove();
                }).catch(function (jqXHR) {
                    mapErrorsToForm($(this), JSON.parse(jqXHR.responseText));
                });
            });

            $authModal.on('click', '#js-btn-show-register-form', function (e) {
                e.preventDefault();
                showRegistrationForm();
            });

            $authModal.on('click', '#js-btn-show-login-form', function (e) {
                e.preventDefault();
                showLoginForm();
            });
        });
    </script>
{% endblock %}

{% block css %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/sweetalert2/6.6.2/sweetalert2.min.css">
{% endblock %}